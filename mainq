from tkinter import * #Imports all of the Tkinter functions
HEIGHT = 500
WIDTH = 800  #Sets the size of the window
window = Tk()
window.title('Bubble Blaster') #Give the game a snappy title
c = Canvas(window, width=WIDTH, height=HEIGHT, bg='darkblue') #Sets dark blue as the colour of the background (the sea)
c.pack()

ship_id = c.create_polygon(5, 5, 5, 25, 30, 15, fill='red')
ship_id2 = c.create_oval(0, 0, 30, 30, outline='red') #Draws a red circle outline
SHIP_R = 15 #The radius (size) of the submarine
MID_X = WIDTH / 2 #The variables “MID_X” and “MID_Y” give the co-ordinates of the middle of the screen
MID_Y = HEIGHT / 2
c.move(ship_id, MID_X, MID_Y) #Moves both parts of the submarine to the centre of the screen
c.move(ship_id2, MID_X, MID_Y)

SHIP_SPD = 10 #The sub will move this far when a key is pressed
def move_ship(event):
    if event.keysym == 'Up':
        c.move(ship_id, 0, -SHIP_SPD) #Moves the two parts of the sub up when the up arrow key is pressed
        c.move(ship_id2, 0, -SHIP_SPD)
    elif event.keysym == 'Down':
        c.move(ship_id, 0, SHIP_SPD) #These lines are activated when the down arrow key is pressed, and the sub moves down
        c.move(ship_id2, 0, SHIP_SPD)
    elif event.keysym == 'Left':
        c.move(ship_id, -SHIP_SPD, 0) #The sub moves left when the left arrow key is pressed
        c.move(ship_id2, -SHIP_SPD, 0)
    elif event.keysym == 'Right':
        c.move(ship_id, SHIP_SPD, 0) #Moves the sub right when the right arrow key is pressed
        c.move(ship_id2, SHIP_SPD, 0)
c.bind_all('<Key>', move_ship) #Tells Python to run “move_ship” whenever any key is pressed

from random import randint
bub_id = list() #This creates three empty lists used to store the ID, radius (size), and speed of each bubble
bub_r = list()
bub_speed = list()
MIN_BUB_R = 10 #Sets the minimum radius of the bubble to 10, and the maximum to 30
MAX_BUB_R = 30
MAX_BUB_SPD = 10
GAP = 100
def create_bubble():
    x = WIDTH + GAP #Sets the position of the bubble on the canvas
    y = randint(0, HEIGHT)
    r = randint(MIN_BUB_R, MAX_BUB_R) #Picks a random size for the bubble, between the maximum and minimum values possible
    id1 = c.create_oval(x - r, y - r, x + r, y + r, outline='white') #This line of code creates the bubble shape
    bub_id.append(id1) #Adds the ID, radius, and speed of the bubble to the three lists
    bub_r.append(r)
    bub_speed.append(randint(1, MAX_BUB_SPD))

def move_bubbles():
    for i in range(len(bub_id)): #Goes through each bubble in the list
        c.move(bub_id[i], -bub_speed[i], 0) #Moves the bubble across the screen according to its speed

def get_coords(id_num): 
    pos = c.coords(id_num)
    x = (pos[0] + pos[2])/2 #Works out the x co-ordinate of the middle of the bubble
    y = (pos[1] + pos[3])/2 #Works out the y co-ordinate of the middle of the bubble
    return x, y
def del_bubble(i): #This function deletes the bubble with ID “i”
    del bub_r[i]
    del bub_speed[i] #Deletes the bubble from the radius and speed lists
    c.delete(bub_id[i]) #Deletes the bubble from the canvas
    del bub_id[i] #Deletes the bubble from the ID list

def clean_up_bubs():
    for i in range(len(bub_id)-1, -1, -1): #This goes through the bubble list backwards to avoid the “for” loop causing an error when bubbles are deleted
        x, y = get_coords(bub_id[i]) #Finds out where the bubble is
        if x < -GAP:
            del_bubble(i)#If the bubble is off the screen then it is deleted – otherwise it would slow the game down

from math import sqrt #Loads the “sqrt” function from the Math library
def distance(id1, id2):
    x1, y1 = get_coords(id1) #Gets the position of the first object
    x2, y2 = get_coords(id2) #Gets the position of the second object
    return sqrt((x2 - x1)**2 + (y2 - y1)**2) #Gives back the distance between them

def collision():
    points = 0 #This variable keeps track of points scored
    for bub in range(len(bub_id)-1, -1, -1): #This loop goes through the entire list of bubbles (it goes backwards to avoid errors when deleting bubbles)
        if distance(ship_id2, bub_id[bub]) < (SHIP_R + bub_r[bub]): #Checks for collisions between the sub and any bubbles
            points += (bub_r[bub] + bub_speed[bub]) #Calculates the number of points this bubble is worth and adds it to “points”
            del_bubble(bub) #Deletes the bubble
    return points #Gives back the number of points

from time import sleep, time #mports the functions you need from the Time library
BUB_CHANCE = 10
#MAIN GAME LOOP
while True:
    if randint(1, BUB_CHANCE) == 1: #If the random number is 1, the program creates a new bubble (on average 1 in 10 times – so there aren’t too many bubbles!)
        create_bubble()
    move_bubbles()#Runs the “move_bubbles” function 
    clean_up_bubs() #Removes bubbles that are off the screen
    window.update() #Updates the window to redraw bubbles that have moved
    sleep(0.01) #Slows the game down so it’s not too fast to play

